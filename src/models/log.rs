/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Log {
    #[serde(rename = "triggers", skip_serializing_if = "Option::is_none")]
    pub triggers: Option<Vec<crate::models::TriggerOutput>>,
    #[serde(rename = "logIndex")]
    pub log_index: String,
    #[serde(rename = "transactionHash")]
    pub transaction_hash: String,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "data")]
    pub data: String,
    #[serde(rename = "topic0", deserialize_with = "Option::deserialize")]
    pub topic0: Option<String>,
    #[serde(rename = "topic1", deserialize_with = "Option::deserialize")]
    pub topic1: Option<String>,
    #[serde(rename = "topic2", deserialize_with = "Option::deserialize")]
    pub topic2: Option<String>,
    #[serde(rename = "topic3", deserialize_with = "Option::deserialize")]
    pub topic3: Option<String>,
}

impl Log {
    pub fn new(log_index: String, transaction_hash: String, address: String, data: String, topic0: Option<String>, topic1: Option<String>, topic2: Option<String>, topic3: Option<String>) -> Log {
        Log {
            triggers: None,
            log_index,
            transaction_hash,
            address,
            data,
            topic0,
            topic1,
            topic2,
            topic3,
        }
    }
}


